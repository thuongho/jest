Testing REact Hooks

109 Prepare Input for Writing setState TEsts
currentGuess
- local state for Input
- no other components need it 
update guessedWord context
check currentGuess against secretWord
clear currentGuess state on submit

input.js
form className form-inline
input data-test input-box
classname mb-2 mx-sm-3
type text
placeholder enter guess

button
data-test submit-button
className btn btn-primary mb-2
Submit

implment useState hooks
currentGuess, setCurrentGuess React.useState

110 State-controlled field
describe('state controlled input field)
state updates with value of input box upon change
create a function to watch currentGuess
const mockSetCurrentGuess = jest.fn();
- don't care about return value, just care about useState return this as the second item
React.useState = jest.fn(() => ["", mockSetCurrentGuess]);
- replaces useState of the Input component and return our mock

wrapper
inputBox 'input-box'

simulate input
make a mockEvent = {target: { value: 'train'}}
apply event to change simulation on inputBox
inputBox.simulate('change', mockEvent);

expect mockSetCurrentGuess toHaveBeenCalledWith('train')

update input

111 Clear currentGuess on Submit
write tests that setCurrentGuess gets called
- with an empty string
- when submit button is clicked

onClic attribute for submit button

write TODO comments in onClick of submit
- update guessedWords context
- check against secretWord and optionally update success context

add preventDefault
- get error
input.test
submitButton.simulate('click', { preventDefault() {}});
- pass in event

112 Plan for Testing getSecretWord
load secretWord when app mounts
- test axios

actions/hookActions.js
- make a function that takes setSecretWord as a param
- function will get secret word from random word server
- run setSecretWord wiith result
- export object from hookActions
- using axios and moxios

watch moxios: Why an dHow lecture in Testing Axios section

81 Moxios: why and how
we don't want to test server when testing app

using moxios lets us test app
- without testing server
- without even running server

test installs moxios
- axios will now send requests to moxios instead of http
- test specifies moxios response

test -> action creator -> axios -> moxios !== http
- test calls action creator 
- action creator calls axios
-- axios uses moxios instead of http for request
- action creator receives moxios response from axios that we specifies in the tests

moxios syntax
test calls moxios.install()
- sets moxios as the axios adapter
- routes any axios request to moxios instead of http

can pass axios instance to moxios.install()
- it will use the configured settings
- leave param blank for default settings

call moxios.wait() during test
- it watches for axios calls
- sends response using callback passed to .wait()
moxios.wait(() => {
  const request = moxios.requests.mostRecent();
  request.respondWidth({
    status: 200,
    response: secretWord
  });
});

113 Test getSecretWord
yarn add axios
yarn add moxios --dev
src/actions/hookActions.js
- write shell just to run test but not enough to pass

import axios
export const getSecretWord = (setSecreteWorld) = {

}

// default export for mocking convenience
export default {
  getSecretWord
}

hookActions.test.js
import moxios
import getSecretWord from hookActions

describe('moxios tests')
beforeEach
  moxios.install()

afterEach
  moxios.uninstall()
  - returns request back to http

calls the getSecretWord callback on axios response, async
secretWord

moxios.wait
get mostRecent request
respondWith
status 200
response secretWord

// creat mock for callback arg
mockSetSecretWord = jest.fn()
- create this to spy on it

await getSecretWord(mockSetSecretWord)
- we don't care what we get back
- we just want to see if it ran

// see whether mock was run with the correct argument
expect mockSetSecretWord toHaveBeenCalledWith secretWord

114 Code getSecretWord
response axios.get('http://localhost:3030')
setSecretWord(response.data)

115 Intro to useEffect and How to test with Enzyme
useEffect
runs function on component reload
by default runs on every reload
[] run only on mount

how to test?
mock getSecretWord
mock shoudl called on App mount 
mock should not get called on App update

use mount
useEffect not called on shallow
- enzyme issue on shallow
- when this is fixed, can use shallow instead of mount in setup
set up mock in setup
- scope mock globally
clear mock in setup
- mocks tracks call cumulatively until reset

116 Test getSecretWord is called on App mount
App.test.js
mount
ReactWrapper instead of ShallowWrapper

import hookActions
mockGetSecretWord = jest.fn()

setup
mockGetSecretWord.mockClear()
hookActions.getSecretWord = mockGetSecretWord
// use mount, cuz useEffect not called on shallow (enzyme issue 2086)
return mount(<App />)

describe('getSecretWord calls)
getSecretWord gets called on App mount
setup
// check to see if secret word was udpated
mockGetSecretWord toHaveBeenCalled

117 useReducer Hook: what and why
state
secretWord
language

useState
- brittle on multiple state
- don't want to run useState 2x

useReducer
[state, dispatch] = React.useReducer(reducer, initialState)
dispatch function updates state
dispatch(action) -> reducer(state, action)
- sends action and state to reducer
- conventionally, action is object with 2 properties:
-- type 
-- payload
reducer runs a switch on type
- whichever type it matches, reducer will use payload to update state
allows us to make functions to update a single key (setSecretWord)
- cleaner functions
- dont have to pass state as an argument explicitly

118 Code useEffect and useReducer to Pass Test
set up state with useReducer hook
function reducer(state, action) {
  it'll look like 
  { type: 'setSecreteWord', payload: 'party'}
}

119 Test getSecretWord Does NOT Run on App Update
the word would change on every update so we only want it to run on component mount

not testing REact's useEffect hook works properly
- that's React's job
Testing that we're using it properly
trigger update with Enzyme setProps()

update() doesn't trigger useEffect
- bug atm issue2254

describe secretWord does not update on App update
wrapper
mockClear()
- mount runs it so we just need to clear first

// wrapper.update() doesn't trigger update
// issue 2091
wrapper.setProps();

expect mockGetSecretWord notToHaveBeenCalled()

120 secretWord Prop Warning for Input
getSecretWord is async so when the app is loaded, the inital state of the secretWord is null
- let's add a spinner

121 Loading Spinner Planning
if secretWord is null
- return spinner
- otherwise input with secretWord

update setup to take secretWord param
- mock useState to set value of secret word
useState retuns an array
- first item - value of secret word
- second item - function to set secret word
mock returns array

mockUseState = jest.fn()
  .mockReturnValue(
    [
      secretWord,
      jest.fn()
    ]
  )
React.useState = mockUseState;

122 Test Loading Spinner
App.test

setup accepts secretWord

mockUseReducer

describe secretWord is not null
beforeEach
wrapper

renders app when secretWord is not null
appComponent
appComponent.exists() toBe true

does not render spinner when secretWord is not null
spinnerComponent spinner
exists toBe false

describe secretWord is null
copy paste above

